/*
 * -------------------------------------------------
 *  nf-core/meripseqpipe Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  cpus = { check_max( 10, 'cpus' ) }
  memory = { check_max( 20.GB * task.attempt, 'memory' ) }
  time = { check_max( 240.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'
  maxForks = 12

  // Process-specific resource requirements

  withLabel: build_index {
    cpus = { check_max( 30, 'cpus' ) }
    memory = { check_max( 90.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
  }
  withLabel: peak_calling {
    cpus = { check_max( 30, 'cpus' ) }
    memory = { check_max( 70.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
    
  }
  withLabel: aligners {
    cpus = { check_max( 20, 'cpus' ) }
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  }
  withLabel: analysis {
    cpus = { check_max( 15, 'cpus' ) }
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
  }
  withLabel: exp_analysis {
    cpus = { check_max( 15, 'cpus' ) }
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: Fastp {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 25.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
  }
  withName: Sort {
    cpus = { check_max( 30, 'cpus' ) }
    memory = { check_max( 35.GB * task.attempt, 'memory' ) }
    time = { check_max( 240.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
}
params {
  // Defaults only, expecting to be overwritten
  max_memory = 100.GB
  max_cpus = 42
  max_time = 240.h
}
